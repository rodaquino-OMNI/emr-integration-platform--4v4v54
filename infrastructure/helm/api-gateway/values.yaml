# Kong API Gateway Helm Values Configuration
# Version: kong/kong-gateway:3.4
# Purpose: Production configuration for EMR Task Management platform API Gateway

nameOverride: ""
fullnameOverride: ""

# High-availability replica configuration
replicaCount: 3

# Container image configuration
image:
  repository: kong/kong-gateway
  tag: "3.4"
  pullPolicy: IfNotPresent

# Enhanced Kong configuration
kong:
  proxy:
    type: LoadBalancer
    http:
      enabled: true
      port: 80
    tls:
      enabled: true
      port: 443
      protocols:
        - TLSv1.2
        - TLSv1.3
      cipherSuites:
        - ECDHE-ECDSA-AES256-GCM-SHA384
        - ECDHE-RSA-AES256-GCM-SHA384

  admin:
    enabled: true
    http:
      enabled: false
    tls:
      enabled: true
      port: 8444
      protocols:
        - TLSv1.2
        - TLSv1.3

  # Prometheus metrics configuration
  metrics:
    enabled: true
    port: 8080
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      prometheus.io/path: "/metrics"
    serviceMonitor:
      enabled: true
      interval: "15s"
      scrapeTimeout: "14s"
      labels:
        release: prometheus

  # Environment configuration
  env:
    database: "off"
    nginx_worker_processes: "auto"
    proxy_access_log: "/dev/stdout"
    admin_access_log: "/dev/stdout"
    proxy_error_log: "/dev/stderr"
    admin_error_log: "/dev/stderr"
    plugins: "bundled,rate-limiting,jwt,cors,prometheus,ip-restriction,bot-detection"
    nginx_proxy_proxy_buffer_size: "16k"
    nginx_proxy_proxy_buffers: "8 16k"
    nginx_proxy_large_client_header_buffers: "8 16k"
    nginx_worker_connections: "16384"

# Resource allocation for high availability
resources:
  requests:
    cpu: 500m
    memory: 512Mi
  limits:
    cpu: 2000m
    memory: 2Gi

# Horizontal Pod Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300

# Ingress configuration with TLS
ingress:
  enabled: true
  className: istio
  annotations:
    kubernetes.io/ingress.class: istio
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
  hosts:
    - host: api.emrtask.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: api-tls
      hosts:
        - api.emrtask.com