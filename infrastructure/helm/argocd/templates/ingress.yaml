{{/* ArgoCD Ingress Template */}}
{{- if .Values.ingress.enabled }}
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  {{- template "argocd.metadata" . }}
  annotations:
    {{- if .Values.ha.enabled }}
    # HA-specific annotations
    kubernetes.io/ingress.class: "istio"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    {{- end }}
    # Security annotations
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # WAF and DDoS protection
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-rpm: "1000"
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    # Additional security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Content-Security-Policy: default-src 'self'; frame-ancestors 'none'";
spec:
  hosts:
  {{- range .Values.ingress.hosts }}
    - {{ . | quote }}
  {{- end }}
  gateways:
    - istio-system/emr-task-gateway
  http:
    - match:
        - uri:
            prefix: "/"
      route:
        - destination:
            host: {{ template "argocd.fullname" . }}-server
            port:
              number: {{ .Values.server.service.port | default 80 }}
          timeout: 30s
          retries:
            attempts: 3
            perTryTimeout: "2s"
            retryOn: "connect-failure,refused-stream,unavailable,cancelled,resource-exhausted"
      headers:
        request:
          set:
            X-Frame-Options: "SAMEORIGIN"
            X-Content-Type-Options: "nosniff"
            X-XSS-Protection: "1; mode=block"
            Strict-Transport-Security: "max-age=31536000; includeSubDomains"
            Content-Security-Policy: "default-src 'self'; frame-ancestors 'none'"
      corsPolicy:
        allowOrigins:
        {{- range .Values.ingress.hosts }}
          - exact: {{ printf "https://%s" . | quote }}
        {{- end }}
        allowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        allowHeaders:
          - Authorization
          - Content-Type
        allowCredentials: true
        maxAge: "24h"
  tls:
    - mode: SIMPLE
      credentialName: argocd-cert
      minProtocolVersion: TLSV1_3
      cipherSuites:
        - ECDHE-ECDSA-AES256-GCM-SHA384
        - ECDHE-RSA-AES256-GCM-SHA384
---
{{- if .Values.ingress.tls }}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ template "argocd.fullname" . }}-cert
  namespace: {{ .Release.Namespace }}
spec:
  secretName: argocd-cert
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days
  privateKey:
    algorithm: ECDSA
    size: 384
  dnsNames:
  {{- range .Values.ingress.hosts }}
    - {{ . }}
  {{- end }}
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
{{- end }}
{{- end }}