{{/* Generate deployment for ArgoCD components */}}
{{- define "argocd.deployment" -}}
{{- $component := .component -}}
{{- $config := .config -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-{{ $component }}
  labels:
    app.kubernetes.io/name: argocd-{{ $component }}
    app.kubernetes.io/component: {{ $component }}
    app.kubernetes.io/part-of: emrtask-platform
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8082"
    prometheus.io/path: "/metrics"
    backup.velero.io/backup-volumes: "argocd-config"
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
spec:
  {{- if not $config.autoscaling.enabled }}
  replicas: {{ $config.replicas }}
  {{- end }}
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-{{ $component }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-{{ $component }}
        app.kubernetes.io/component: {{ $component }}
        app.kubernetes.io/part-of: emrtask-platform
      annotations:
        monitoring.emrtask.io/port: "8082"
        monitoring.emrtask.io/path: "/metrics"
        monitoring.emrtask.io/scrape-interval: "30s"
    spec:
      serviceAccountName: argocd-{{ $component }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-{{ $component }}
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/infra
                operator: Exists
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfied: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: argocd-{{ $component }}
      containers:
      - name: {{ $component }}
        image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag }}"
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        args:
        - argocd-{{ $component }}
        {{- if eq $component "server" }}
        - --staticassets
        - /shared/app
        - --insecure
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        ports:
        - containerPort: 8082
          name: metrics
        {{- if eq $component "server" }}
        - containerPort: 8080
          name: http
        - containerPort: 8083
          name: grpc
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          {{- toYaml $config.resources | nindent 10 }}
        env:
        - name: ARGOCD_METRICS_PORT
          value: "8082"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: argocd-config
          mountPath: /app/config
          readOnly: true
        {{- if eq $component "server" }}
        - name: ssh-known-hosts
          mountPath: /app/config/ssh
          readOnly: true
        - name: tls-certs
          mountPath: /app/config/tls
          readOnly: true
        {{- end }}
      volumes:
      - name: argocd-config
        configMap:
          name: argocd-cm
      {{- if eq $component "server" }}
      - name: ssh-known-hosts
        configMap:
          name: argocd-ssh-known-hosts-cm
      - name: tls-certs
        secret:
          secretName: argocd-tls-certs
          optional: true
      {{- end }}
{{- end }}

---
# ArgoCD Server Deployment
{{- $serverConfig := .Values.server -}}
{{- template "argocd.deployment" (dict "component" "server" "config" $serverConfig "Release" .Release "Chart" .Chart "Template" .Template) }}

---
# ArgoCD Repo Server Deployment
{{- $repoConfig := .Values.repoServer -}}
{{- template "argocd.deployment" (dict "component" "repo-server" "config" $repoConfig "Release" .Release "Chart" .Chart "Template" .Template) }}

---
# ArgoCD Application Controller Deployment
{{- $controllerConfig := .Values.applicationController -}}
{{- template "argocd.deployment" (dict "component" "application-controller" "config" $controllerConfig "Release" .Release "Chart" .Chart "Template" .Template) }}