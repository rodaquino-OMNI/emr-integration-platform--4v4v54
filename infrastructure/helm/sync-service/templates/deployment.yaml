apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-sync-service
  labels:
    app.kubernetes.io/name: sync-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: crdt-sync
    app.kubernetes.io/part-of: task-management
spec:
  # Ensure high availability with minimum 3 replicas
  replicas: {{ .Values.replicaCount | default 3 }}
  # Configure zero-downtime updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  # Allow time for CRDT state convergence
  minReadySeconds: 30
  selector:
    matchLabels:
      app.kubernetes.io/name: sync-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sync-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/component: crdt-sync
        app.kubernetes.io/part-of: task-management
      annotations:
        # Enable Prometheus metrics scraping
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        # Add checksum annotation for config changes
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      # Graceful shutdown period for CRDT state cleanup
      terminationGracePeriodSeconds: 60
      # Security context for the pod
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      containers:
        - name: sync-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          # Container security context
          securityContext:
            runAsUser: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          # Resource allocation optimized for CRDT operations
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu | default "500m" }}
              memory: {{ .Values.resources.requests.memory | default "512Mi" }}
            limits:
              cpu: {{ .Values.resources.limits.cpu | default "1000m" }}
              memory: {{ .Values.resources.limits.memory | default "1Gi" }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          # Environment configuration for CRDT sync
          env:
            - name: MAX_BATCH_SIZE
              value: {{ .Values.config.maxBatchSize | default "100" | quote }}
            - name: SYNC_TIMEOUT_MS
              value: {{ .Values.config.syncTimeoutMs | default "500" | quote }}
            - name: RETRY_ATTEMPTS
              value: {{ .Values.config.retryAttempts | default "3" | quote }}
            - name: RETRY_DELAY_MS
              value: {{ .Values.config.retryDelayMs | default "1000" | quote }}
            - name: VECTOR_CLOCK_TTL_MS
              value: {{ .Values.config.vectorClockTTLMs | default "86400000" | quote }}
          # Health checks
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          # Volume mounts for temporary data
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /app/config
              readOnly: true
      # Pod distribution and scheduling
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: sync-service
                    app.kubernetes.io/instance: {{ .Release.Name }}
                topologyKey: kubernetes.io/hostname
      # Volumes definition
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: {{ .Release.Name }}-sync-service-config
      # Node selection for optimal performance
      nodeSelector:
        kubernetes.io/role: worker
      # Tolerations for node issues
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300