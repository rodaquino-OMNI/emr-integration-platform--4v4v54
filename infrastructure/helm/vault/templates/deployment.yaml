apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "vault.fullname" . }}
  labels:
    {{- include "vault.labels" . | nindent 4 }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    vault.hashicorp.com/version: {{ .Values.server.image.tag }}
    security.vault.hashicorp.com/secure-mode: "true"
    backup.velero.io/backup-volumes: "data,audit"

spec:
  replicas: {{ .Values.server.ha.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: {{ .Release.Name }}
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

  template:
    metadata:
      labels:
        {{- include "vault.labels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: {{ .Values.monitoring.enabled | quote }}
        prometheus.io/path: "/v1/sys/metrics"
        prometheus.io/port: "8200"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-pre-populate: "true"
        vault.hashicorp.com/tls-skip-verify: "false"
        vault.hashicorp.com/log-level: "info"

    spec:
      serviceAccountName: {{ .Values.server.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.security.podSecurityContext | nindent 8 }}

      # Ensure high availability by spreading pods across nodes
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: vault
            topologyKey: kubernetes.io/hostname

      # Ensure even distribution across availability zones
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: vault

      # Initialize Vault if needed
      initContainers:
      - name: vault-init
        image: {{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}
        command:
        - /bin/sh
        - -c
        - vault operator init -status || true

      containers:
      - name: vault
        image: {{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}
        imagePullPolicy: {{ .Values.server.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.security.securityContext | nindent 12 }}

        ports:
        - containerPort: 8200
          name: http
          protocol: TCP
        - containerPort: 8201
          name: https-internal
          protocol: TCP

        resources:
          {{- toYaml .Values.server.resources | nindent 12 }}

        volumeMounts:
        - name: data
          mountPath: /vault/data
        - name: audit
          mountPath: /vault/audit
        - name: config
          mountPath: /vault/config
        - name: tls
          mountPath: /vault/tls
          readOnly: true

        # Startup probe for initial availability check
        startupProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30

        # Liveness probe for runtime health checking
        livenessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Readiness probe for traffic serving capability
        readinessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        env:
        - name: VAULT_ADDR
          value: "https://127.0.0.1:8200"
        - name: VAULT_API_ADDR
          value: "https://$(POD_IP):8200"
        - name: VAULT_CLUSTER_ADDR
          value: "https://$(POD_IP):8201"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ template "vault.fullname" . }}-data
      - name: audit
        persistentVolumeClaim:
          claimName: {{ template "vault.fullname" . }}-audit
      - name: config
        configMap:
          name: {{ template "vault.fullname" . }}-config
      - name: tls
        secret:
          secretName: {{ template "vault.fullname" . }}-tls