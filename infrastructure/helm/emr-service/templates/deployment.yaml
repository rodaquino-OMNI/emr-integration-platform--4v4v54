# Kubernetes Deployment API version: 1.26+
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-emr-service
  labels:
    app.kubernetes.io/name: emr-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    security-tier: restricted
    data-classification: phi
spec:
  replicas: {{ .Values.replicaCount | default 3 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: emr-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.ports.metrics }}"
        prometheus.io/path: "/metrics"
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: emr-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        security-tier: restricted
        data-classification: phi
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: {{ .Release.Name }}-emr-service
      containers:
        - name: emr-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: {{ .Values.service.ports.http }}
              protocol: TCP
            - name: hl7
              containerPort: {{ .Values.service.ports.hl7 }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.service.ports.metrics }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: EPIC_API_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-emr-config
                  key: epic.api.url
            - name: CERNER_API_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-emr-config
                  key: cerner.api.url
          envFrom:
            - secretRef:
                name: emr-secrets
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: tls-certs
              mountPath: /etc/emr/certs
              readOnly: true
            - name: emr-config
              mountPath: /etc/emr/config
              readOnly: true
      volumes:
        - name: tmp
          emptyDir: {}
        - name: tls-certs
          secret:
            secretName: emr-secrets
            items:
              - key: tls-certificates
                path: tls.crt
        - name: emr-config
          configMap:
            name: {{ .Release.Name }}-emr-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - emr-service
                topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: emr-service
      terminationGracePeriodSeconds: 60