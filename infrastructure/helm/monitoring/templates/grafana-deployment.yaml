apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
    component: monitoring
    part-of: emr-task-platform
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/grafana-config.yaml") . | sha256sum }}
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  replicas: {{ .Values.grafana.replicaCount | default 1 }}
  selector:
    matchLabels:
      app: grafana
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/grafana-config.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - grafana
              topologyKey: kubernetes.io/hostname

      # Enhanced security context
      securityContext:
        fsGroup: 472 # grafana group
        runAsUser: 472 # grafana user
        runAsNonRoot: true

      # Main container configuration
      containers:
      - name: grafana
        image: "grafana/grafana:{{ .Values.grafana.version }}"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP

        # Resource limits and requests
        resources:
          limits:
            cpu: {{ .Values.grafana.resources.limits.cpu | default "500m" }}
            memory: {{ .Values.grafana.resources.limits.memory | default "1Gi" }}
          requests:
            cpu: {{ .Values.grafana.resources.requests.cpu | default "250m" }}
            memory: {{ .Values.grafana.resources.requests.memory | default "512Mi" }}

        # Volume mounts
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
          subPath: data
        - name: config
          mountPath: /etc/grafana/provisioning

        # Environment configuration
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: admin-password
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_SECURITY_ALLOW_EMBEDDING
          value: "false"
        - name: GF_SECURITY_COOKIE_SECURE
          value: "true"
        - name: GF_SERVER_ROOT_URL
          value: "%(protocol)s://%(domain)s/grafana"
        - name: GF_PATHS_PROVISIONING
          value: "/etc/grafana/provisioning"
        - name: GF_SECURITY_STRICT_TRANSPORT_SECURITY
          value: "true"
        - name: GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS
          value: "31536000"
        - name: GF_SECURITY_CONTENT_SECURITY_POLICY
          value: "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;"

        # Enhanced probes for high availability
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 10
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 10
          failureThreshold: 10
        startupProbe:
          httpGet:
            path: /api/health
            port: http
          failureThreshold: 30
          periodSeconds: 10

      # Volume definitions
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: config
        configMap:
          name: grafana-provisioning

      # Termination grace period
      terminationGracePeriodSeconds: 60

      # Pod security policy
      securityContext:
        seccompProfile:
          type: RuntimeDefault