version: '3.9'

services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./packages/api-gateway
      dockerfile: ../../Dockerfile
      target: development
    image: emrtask/api-gateway:latest
    ports:
      - "3000:3000"
      - "9229:9229"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - API_VERSION=v1
      - CORS_ORIGIN=*
      - API_RATE_LIMIT=1000
      - API_RATE_WINDOW=60000
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
    volumes:
      - ./packages/api-gateway:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - emrtask_network
    depends_on:
      task-service:
        condition: service_healthy
      emr-service:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Task Service
  task-service:
    build:
      context: ./packages/task-service
      dockerfile: ../../Dockerfile
      target: development
    image: emrtask/task-service:latest
    ports:
      - "3001:3001"
      - "9230:9229"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - ./packages/task-service:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - emrtask_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # EMR Service
  emr-service:
    build:
      context: ./packages/emr-service
      dockerfile: ../../Dockerfile
      target: development
    image: emrtask/emr-service:latest
    ports:
      - "3002:3002"
      - "9231:9229"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - FHIR_VERSION=4.0.1
      - EPIC_BASE_URL=${EPIC_BASE_URL}
      - EPIC_CLIENT_ID=${EPIC_CLIENT_ID}
      - EPIC_CLIENT_SECRET=${EPIC_CLIENT_SECRET}
    volumes:
      - ./packages/emr-service:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - emrtask_network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=emrtask
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - emrtask_network
    secrets:
      - postgres_password
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - emrtask_network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - emrtask_network
    depends_on:
      - zookeeper

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - emrtask_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  postgres_backup:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local

networks:
  emrtask_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: emrtask0
      com.docker.network.bridge.enable_icc: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt